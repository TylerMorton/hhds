# This file is distributed under the BSD 3-Clause License. See LICENSE for details.

load("@rules_cc//cc:defs.bzl", "cc_library", "cc_test")
load("@bazel_skylib//rules:build_test.bzl", "build_test")
load("//tools:copt_default.bzl", "COPTS")
#load("@rules_rust_bindgen//:defs.bzl", "rust_bindgen") ## Investigate rust_bindgen vs rust_bindgen_lib
load("@rules_rust_bindgen//:defs.bzl", "rust_bindgen_library")

exports_files(["rust"])
exports_files(["tree.hpp"])

config_setting(
    name = "use_profiling",
    values = {"define": "profiling=1"},
)

cc_library(
    name = "rigtorp",
    hdrs = glob(["tests/*.hpp"]),
    copts = COPTS,
    includes = ["."],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "core",
    srcs = glob(
	["temptree.cpp", "tree.cpp", "wrapper.cpp"],
        exclude = ["*test*.cpp"],
    ),
    hdrs = glob(["tree.hpp", "lhtree.hpp", "wrapper.hpp"],),
    copts = COPTS,
    defines = select({
        ":use_profiling": [
            "HHDS_PROFILING=1",
        ],
        "//conditions:default": [],
    }),
    includes = ["."],
    visibility = ["//visibility:public"],
    deps = [
        "@fmt",
        "@iassert",
        "@emhash",
    ] + select({
        ":use_profiling": [
            "@com_google_perfetto//:perfetto",
        ],
        "//conditions:default": [],
    }),
)

cc_test(
    name = "add_append_deep_bench",
    srcs = ["tests/add_append_bench/deep_tree_bench.cpp"],
    deps = [
        "@google_benchmark//:benchmark",
        "@googletest//:gtest_main",
        ":core",
    ],
)

cc_test(
    name = "traversal_deep_bench",
    srcs = ["tests/traversal_bench/preorder_bench/deep_tree_bench.cpp"],
    deps = [
        "@google_benchmark//:benchmark",
        "@googletest//:gtest_main",
        ":core",
    ],
)

cc_test(
    name = "traversal_wide_bench",
    srcs = ["tests/traversal_bench/preorder_bench/wide_tree_bench.cpp"],
    deps = [
        "@google_benchmark//:benchmark",
        "@googletest//:gtest_main",
        ":core",
    ],
)

cc_test(
    name = "traversal_chip_typical_bench",
    srcs = ["tests/traversal_bench/preorder_bench/chip_typical_tree_bench.cpp"],
    deps = [
        "@google_benchmark//:benchmark",
        "@googletest//:gtest_main",
        ":core",
    ],
)

cc_test(
    name = "traversal_chip_long_typical_bench",
    srcs = ["tests/traversal_bench/preorder_bench/chip_typical_long_tree_bench.cpp"],
    deps = [
        "@google_benchmark//:benchmark",
        "@googletest//:gtest_main",
        ":core",
    ],
)

cc_test(
    name = "add_append_wide_bench",
    srcs = ["tests/add_append_bench/wide_tree_bench.cpp"],
    deps = [
        "@google_benchmark//:benchmark",
        "@googletest//:gtest_main",
        ":core",
    ],
)

cc_test(
    name = "add_append_chip_typical_bench",
    srcs = ["tests/add_append_bench/chip_typical_tree_bench.cpp"],
    deps = [
        "@google_benchmark//:benchmark",
        "@googletest//:gtest_main",
        ":core",
    ],
)

cc_test(
    name = "add_append_chip_typical_long_bench",
    srcs = ["tests/add_append_bench/chip_typical_long_tree_bench.cpp"],
    deps = [
        "@google_benchmark//:benchmark",
        "@googletest//:gtest_main",
        ":core",
    ],
)

# cc_test(
#     name = "delete_chip_typical_bench",
#     srcs = ["tests/delete_bench/delete_leaf_bench/chip_typical_tree_bench.cpp"],
#     deps = [
#         "@google_benchmark//:benchmark",
#         "@googletest//:gtest_main",
#         ":core",
#     ],
# )

cc_binary(
    name = "deep_tree_correctness",
    srcs = ["tests/deep_tree_correctness.cpp"],
    deps = [
        ":core",
    ],
)

cc_binary(
    name = "wide_tree_correctness",
    srcs = ["tests/wide_tree_correctness.cpp"],
    deps = [
        ":core",
    ],
    # copts = ["-DPROFILE"],  # Enable profiling in code
    # linkopts = ["-lprofiler"],
)

cc_binary(
    name = "chip_typical_correctness",
    srcs = ["tests/chip_typical_correctness.cpp"],
    deps = [
        ":core",
    ],
)

cc_binary(
    name = "chip_typical_long_correctness",
    srcs = ["tests/chip_typical_long_correctness.cpp"],
    deps = [
        ":core",
    ],
)

cc_binary(
    name = "forest_correctness",
    srcs = ["tests/forest_correctness.cpp"],
    deps = [
        ":core",
    ],
)

rust_bindgen_library(
    name ="bindgen-test",
    bindgen_flags = [
        "--allowlist-function=hhds::Tree_pointers::Tree_pointers",
	"--blocklist-type=.*",
#	"--clang", "/usr/bin/clang++",
	#"-Wno-error",
	#"#-Wno-unused-variable",
    #    "--allowlist-function=simple_.*",
	#"--allowlist-var=SIMPLE_.*",
	#"-- --no-std",
    ],
    clang_flags = [
        "-x", "c++",
	"-std=c++17",
	"--sysroot=/usr",
	"-isystem", "/usr/include",
	"-isystem", "/usr/include/x86_64-linux-gnu",
	"-isystem", "/usr/include/c++/12",  # Or 11 if 12 doesn't exist
	"-isystem", "/usr/include/x86_64-linux-gnu/c++/12",  # Optional but safe
	"-isystem", "/usr/lib/gcc/x86_64-linux-gnu/12/include",  # ðŸ”¥ This is key
	"-isystem", "/usr/lib/llvm-14/lib/clang/14.0.0/include",  # For clang built-ins
    ],
    cc_lib = "//hhds:core",
    edition = "2021",
    header = "//hhds:tree.hpp",
)

