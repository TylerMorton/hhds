/* automatically generated by rust-bindgen 0.71.1 */

#[doc = " NOTES for future contributors:\n Realize that the total number of bits for the\n each entry of Tree_pointers is 3 + 5*CHUNK_BITS\n + 2*7*SHORT_DELTA = 3 + 5*43 + 2*7*21 = 512 bits.\n\n The number of bits for each entry of Tree_pointers is\n exactly one cache line. If at any point there is bookkeeping\n to be added, please add it to the Tree_pointers class after\n adjusting the values of CHUNK_BITS and SHORT_DELTA.\n\n Other values for reference (CHUNK_BITS, SHORT_DELTA, TOTAL_BITS)\n  40 22 -> 511\n43 21 -> 512\n45 20 -> 508\n48 19 -> 509\n\n NEVER let it exceed 512 bits."]
pub type hhds_Tree_pos = i64;
pub type ForestIntHandle = *mut ::std::os::raw::c_void;
pub type TreeIntHandle = *mut ::std::os::raw::c_void;
pub type PreOrdIterHandle = *mut ::std::os::raw::c_void;
unsafe extern "C" {
    pub fn tree_int_new_empty() -> TreeIntHandle;
}
unsafe extern "C" {
    pub fn tree_int_free(tree: TreeIntHandle);
}
unsafe extern "C" {
    pub fn get_parent(tree: TreeIntHandle, cur_index: hhds_Tree_pos) -> hhds_Tree_pos;
}
unsafe extern "C" {
    pub fn get_last_child(parent_index: hhds_Tree_pos) -> hhds_Tree_pos;
}
unsafe extern "C" {
    pub fn get_first_child(tree: TreeIntHandle, parent_index: hhds_Tree_pos) -> hhds_Tree_pos;
}
unsafe extern "C" {
    pub fn get_root(tree: TreeIntHandle) -> hhds_Tree_pos;
}
unsafe extern "C" {
    pub fn add_child(
        tree: TreeIntHandle,
        parent_index: hhds_Tree_pos,
        data: ::std::os::raw::c_int,
    ) -> hhds_Tree_pos;
}
unsafe extern "C" {
    pub fn add_root(tree: TreeIntHandle, data: ::std::os::raw::c_int) -> hhds_Tree_pos;
}
unsafe extern "C" {
    pub fn delete_leaf(tree: TreeIntHandle, leaf_index: hhds_Tree_pos);
}
unsafe extern "C" {
    pub fn delete_subtree(tree: TreeIntHandle, subtree_root: hhds_Tree_pos);
}
unsafe extern "C" {
    pub fn add_subtree_ref(
        tree: TreeIntHandle,
        node_pos: hhds_Tree_pos,
        subtree_ref: hhds_Tree_pos,
    );
}
unsafe extern "C" {
    pub fn tree_get_data(tree: TreeIntHandle, idx: hhds_Tree_pos) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tree_set_data(tree: TreeIntHandle, idx: hhds_Tree_pos, data: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn print_tree(tree: TreeIntHandle, deep: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn get_sibling_order_iterator(handle: TreeIntHandle) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn get_pre_order_iterator(
        handle: TreeIntHandle,
        start: hhds_Tree_pos,
        follow_subtrees: bool,
    ) -> PreOrdIterHandle;
}
unsafe extern "C" {
    pub fn increment_pre_order_iterator(handle: PreOrdIterHandle) -> PreOrdIterHandle;
}
unsafe extern "C" {
    pub fn deref_pre_order_iterator(handle: PreOrdIterHandle) -> hhds_Tree_pos;
}
unsafe extern "C" {
    pub fn get_data_pre_order_iter(handle: PreOrdIterHandle) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn get_post_order_iterator(
        handle: TreeIntHandle,
        start: hhds_Tree_pos,
        follow_subtrees: bool,
    ) -> PreOrdIterHandle;
}
unsafe extern "C" {
    pub fn increment_post_order_iterator(handle: PreOrdIterHandle) -> PreOrdIterHandle;
}
unsafe extern "C" {
    pub fn deref_post_order_iterator(handle: PreOrdIterHandle) -> hhds_Tree_pos;
}
unsafe extern "C" {
    pub fn get_data_post_order_iter(handle: PreOrdIterHandle) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn forest_int_new() -> ForestIntHandle;
}
unsafe extern "C" {
    pub fn forest_int_free(forest: ForestIntHandle);
}
unsafe extern "C" {
    pub fn forest_int_get_tree(forest: ForestIntHandle, tree_ref: hhds_Tree_pos) -> TreeIntHandle;
}
unsafe extern "C" {
    pub fn forest_int_create_tree(
        forest: ForestIntHandle,
        root_data: ::std::os::raw::c_int,
    ) -> hhds_Tree_pos;
}
unsafe extern "C" {
    pub fn forest_int_add_ref(forest: ForestIntHandle, ref_: hhds_Tree_pos);
}
unsafe extern "C" {
    pub fn forest_int_remove_reference(forest: ForestIntHandle, ref_: hhds_Tree_pos);
}
unsafe extern "C" {
    pub fn forest_int_delete_tree(forest: ForestIntHandle, ref_: hhds_Tree_pos) -> bool;
}
